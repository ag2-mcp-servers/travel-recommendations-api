# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:26:39+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query
from pydantic import constr

from models import Error400, Error500, ReferenceDataRecommendedLocationsGetResponse

app = MCPProxy(
    description='Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.',
    title='Travel Recommendations API',
    version='1.0.3',
    servers=[{'url': 'https://test.api.amadeus.com/v1'}],
)


@app.get('/reference-data/recommended-locations', tags=['location_recommendations'])
def get_recommended_location(
    city_codes: str = Query(..., alias='cityCodes'),
    traveler_country_code: Optional[constr(min_length=2, max_length=2)] = Query(
        'FR', alias='travelerCountryCode'
    ),
    destination_country_codes: Optional[str] = Query(
        None, alias='destinationCountryCodes'
    ),
):
    """
    GET recommended destinations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
